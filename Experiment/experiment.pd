# REPLACE FOLLOWING BY
#
# use PDL::PP qw/PDL::Experiment PDL::Experiment Experiment/;
# 
# when using not in this package.

require '../PP.pm';
PDL::PP->import(qw/PDL::Experiment PDL::Experiment Experiment/);

# TEST CASE:
# Exchange two first dimensions.
# Once mapping is in place, this becomes very powerful.

defpdl(
	'PDLTEST1',
	[qw/a(x,y,X) [o]b(y,x,X)/],
	'int c',
	'loop(x) %{
	 	loop(y) %{
			$b() = $a();
		%}
	%}'
);

# Matrix multiplication.  See how naturally this comes out!!!
defpdl(
	'PDLTEST2',
	[qw/a(xa,xy,X) b(xy,yb,X) [o]c(xa,yb,X)/],
	'',
	'loop(xa,yb) %{
		double tmp=0;
	 	loop(xy) %{
			tmp += $a() * $b();
		%}
		$c() = tmp;
	%}'
);

# Check whether x1 and x2 works.
defpdl(
	'PDLTEST3',
	[qw/a(x,x) [o]b(x,x)/],
	'int c',
	'loop(x0,x1) %{
		$b(x0=>x0,x1=>x1) = $a(x0=>x1,x1=>x0) + x0 + 2*x1;
	%}'
);

done();
