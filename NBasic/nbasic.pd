# REPLACE FOLLOWING BY
#
# use PDL::PP qw/PDL::Experiment PDL::Experiment Experiment/;
# 
# when using not in this package.
#
# Parts from old mkpdlbasicops.p, rest Copyright (C) Tuomas J. Lukka 1996

require '../PP.pm';
PDL::PP->import(qw/PDL::NBasic PDL::NBasic NBasic/);


@biops1  = qw( + * - / );
@biops2  = qw( > < <= >= == != );
@biops3  = qw( << >> | & ^ );
@ufuncs  = qw( sqrt sin cos log exp abs ! ~ );
@bifuncs = qw( pow atan2 MODULO SPACESHIP );

sub nofloat { # Decide which ops can't be done on floats/doubles
    	my $op = shift;
	my (@bitops) = qw( << >> | & ^ ~ );
    	for (@bitops) { return 1 if $_ eq $op }
	return 0;
}
        
addhdr('
#include <math.h>

#define MODULO(X,N)     ( (X) - (N)*((int)((X)/(N))) )
#define SPACESHIP(A,B)  ( (2*((A)>(B))-1) * ((A)!=(B))  )
#define abs(A)          ( (A)>0 ? (A) : -(A) )
');


my $ind = 0;
for (\@biops1, \@biops2, \@biops3) { $ind ++;
defpdl("my_biop$ind",
	'a(); b(); [o]c();',
	"char* op",
	q|printf("MYBIOP, '%s'\n",op);
	 if(0) {|.
	(join '',map {qq^	} else if(!strcmp(op,"$_")) { 
		^.(nofloat($_) ? ' types(BSUL) %{ ':''). qq^
		threadloop %{
		\$c() = \$a() $_ \$b(); %} 
		^.(nofloat($_) ? ' %} ':''). qq^
		^ } @$_).
	q|}; printf("OMYBIOP, '%s'\n",op); |,
);
}

done();



